#server.port=${PORT}
server.port = 8080
# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
spring.datasource.url=jdbc:postgresql://eu-west-1.compute.amazonaws.com/postgresql-deep-67215
#spring.datasource.url=${DATABASE_URL}
#spring.datasource.url=${DATABASE_URL}
spring.datasource.username=wlakcadgsyuymg
spring.datasource.password=4f328dcf381c5971d9b599e9df775b9ce8caf9063594e6b511d2bf1cd2cfe8e6
spring.datasource.driver-class-name=org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.default_schema: public
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=update
# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# SECURITY
logging.level.org.springframework.security=DEBUG


